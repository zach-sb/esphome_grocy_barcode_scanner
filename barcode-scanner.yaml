substitutions:
  # Names
  device_id: kitchen-barcode-scanner
  device_name: Kitchen Barcode Scanner

  # UART Pins for the Barcode Scanner
  uart_tx_pin: GPIO21
  uart_rx_pin: GPIO20

  # i2C for Gesture Sensor
  i2c_sda_pin: GPIO08
  i2c_scl_pin: GPIO09

  # SPI and Display Pins
  spi_clk_pin: GPIO4
  spi_mosi_pin: GPIO6

  diplay_cs_pin: GPIO0
  display_dc_pin: GPIO1
  diplay_reset_pin: GPIO2

  # HA Sensors for info screen
  ha_sensor_1: sensor.grocy_shopping_list
  sensor_icon_1: mdi:cart-outline
  sensor_1_color: "838996"

  ha_sensor_2: sensor.grocy_stock
  sensor_icon_2: mdi:fridge-outline
  sensor_2_color: "ffffff"

  # Timezone
  timezone: Australia/Sydney

esp32:
  board: esp32-c3-devkitm-1

esphome:
  name: ${device_id}
  friendly_name: ${device_name}
  on_boot:
    - priority:  800
      then:
        - display.page.show: page_boot
        - wait_until:
             api.connected:
        - delay: 5s
        - display.page.show: page_icons
        - delay: 1s
        - switch.turn_on: system_enable
        - switch.turn_on: navigate_enable
    - priority: 500 #Ideally this is sent as soon as it is an option
      then:
        # Disable Scanner
        - uart.write:
            id: scanner
            data: [0x04, 0xEA, 0x04, 0x00, 0xFF, 0x0E]

wifi:
  id: wifi_id
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_password_iot
  fast_connect: True
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Kitchen-Barcode-Scanner"
    password: "jeyNXFDY3JRj"

ota:
  - platform: esphome
    password: "d6e98c67aa9aacbdde3a5375c5cab6fe"

# Enable Home Assistant API
api:
  id: api_id
  encryption:
    key: "mTm+5FGld4shCakU+5g/aTpShrphCunJ5z//0u+8UPs="

  # To mitigate burn in, the info screen should only be shown sparingly, and this is controlled by HA.
  # If HA not connected, turn off that switch just in case.
  on_client_disconnected:
    - if:
        condition:
          not:
            api.connected: #Basically, the last client disconnected
        then:
          switch.turn_off: info_when_idle

  # Setup a action in home assistant to update the text sensors
  actions:
    - action: set_product_text
      variables:
        product_name: string
        product_stock: string
      then:
        - lambda: |-
            id(grocy_product_name).publish_state(product_name);
        - lambda: |-
            id(grocy_product_stock).publish_state(product_stock);

# Enable logging
logger:

spi:
  clk_pin: ${spi_clk_pin}
  mosi_pin: ${spi_mosi_pin}

i2c:
  sda: ${i2c_sda_pin}
  scl: ${i2c_scl_pin}
  scan: false
  id: bus_a

apds9960:
  address: 0x39
  update_interval: 10s
  gesture_gain: 1x

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: ${timezone}

number:
  - platform: template
    id: sleep_delay
    name: "Sleep Time"
    optimistic: true
    min_value: 15
    max_value: 300
    step: 1
    unit_of_measurement: "seconds"
    entity_category: CONFIG
    restore_value: true

display:
  - platform: ssd1331_spi
    id: screen
    update_interval: 0.5s
    reset_pin: ${diplay_reset_pin}
    cs_pin: ${diplay_cs_pin}
    dc_pin: ${display_dc_pin}
    pages:
      - id: page_icons
        lambda: |-

          std::string mode = id(scanner_mode).state;

          if (mode != "Off" || id(info_when_idle).state){
            ///////////////
            //Info Icons //
            ///////////////

            //HA API and wifi
            if( id(api_id).is_connected() ){
              it.image(it.get_width(), 0, id(icon_wifi), ImageAlign::TOP_RIGHT, id(green_dim), Color::BLACK);
            }
            else {
              //Wifi
              if( id(wifi_id).is_connected() ){
               it.image(it.get_width(), 0, id(icon_wifi), ImageAlign::TOP_RIGHT, id(orange_dim), Color::BLACK);
              }
              else{
                it.image(it.get_width(), 0, id(icon_wifi_off), ImageAlign::TOP_RIGHT, id(gray), Color::BLACK);
              }
            }

            if (mode != "Off"){
              ///////////////////
              //Main Menu Icons//
              ///////////////////
              if (mode == "Purchase"){
                it.image(it.get_width()/2, it.get_height()/2, id(icon_purchase), ImageAlign::CENTER, id(green), Color::BLACK);
              }

              else if (mode == "Consume"){
                it.image(it.get_width()/2, it.get_height()/2, id(icon_consume), ImageAlign::CENTER, id(red), Color::BLACK);
              }

              else if (mode == "Open"){
                it.image(it.get_width()/2, it.get_height()/2, id(icon_open), ImageAlign::CENTER, id(orange), Color::BLACK);
              }

              else if (mode == "Check Stock"){
                it.image(it.get_width()/2, it.get_height()/2, id(icon_search), ImageAlign::CENTER, Color::WHITE, Color::BLACK);
              }

              else if (mode == "Add to Shopping List"){
                it.image(it.get_width()/2, it.get_height()/2, id(icon_list), ImageAlign::CENTER, Color::WHITE, Color::BLACK);
              }
            }

            ///////////////
            //Info Screen//
            ///////////////
            else if (id(info_when_idle).state){

              //Date
              it.strftime(2, 0, id(mono12), id(gray), "%d/%m/%Y", id(homeassistant_time).now());

              //12h Clock
              char buffer[6];
              char format[6] = "%I:%M";
              id(homeassistant_time).now().strftime(buffer, sizeof(buffer), format);
              if (buffer[0] == '0')
                buffer[0] = ' ';
              it.printf(0, 15, id(mono25), "%s", buffer);
              it.strftime(80, 32, id(roboto10), "%p", id(homeassistant_time).now()); //AM or PM

              //HA Sensor 1 (left)
              it.image(0, 62, id(icon_sensor_1), ImageAlign::BOTTOM_LEFT, id(sensor_1_color), Color::BLACK);
              it.printf(15, 64, id(roboto15), id(gray), TextAlign::BOTTOM_LEFT, "%.0f", id(ha_sensor_1).state);

              //HA Sensor 2 (right)
              it.image(48, 62, id(icon_sensor_2), ImageAlign::BOTTOM_LEFT, id(sensor_2_color), Color::BLACK);
              it.printf(63, 64, id(roboto15), id(gray), TextAlign::BOTTOM_LEFT, "%.0f", id(ha_sensor_2).state);
            }
          }

      - id: page_scanned
        lambda: |-

          std::string mode = id(scanner_mode).state;

          ///////////////
          //Info Icons //
          ///////////////

          //HA API and wifi
          if( id(api_id).is_connected() ){
            it.image(it.get_width(), 0, id(icon_wifi), ImageAlign::TOP_RIGHT, id(green_dim), Color::BLACK);
          }
          else {
            //Wifi
            if( id(wifi_id).is_connected() ){
              it.image(it.get_width(), 0, id(icon_wifi), ImageAlign::TOP_RIGHT, id(orange_dim), Color::BLACK);
            }
            else{
              it.image(it.get_width(), 0, id(icon_wifi_off), ImageAlign::TOP_RIGHT, id(gray), Color::BLACK);
            }
          }

          //Header
          if(mode == "Purchase"){
            it.print(it.get_width()/2, 0, id(roboto15), green, TextAlign::TOP_CENTER, "Add");
          }
          else if(mode == "Consume"){
            it.print(it.get_width()/2, 0, id(roboto15), red, TextAlign::TOP_CENTER, "Consume");
          }
          else if(mode == "Open"){
            it.print(it.get_width()/2, 0, id(roboto15), orange, TextAlign::TOP_CENTER, "Open");
          }
          else if (mode == "Check Stock"){
            it.print(it.get_width()/2, 0, id(roboto15), Color::WHITE, TextAlign::TOP_CENTER, "Check");
          }
          else if (mode == "Add to Shopping List"){
            it.print(it.get_width()/2, 0, id(roboto15), green, TextAlign::TOP_CENTER, "+ List");
          }
          else {
            it.print(it.get_width()/2, 0, id(roboto15), gray, TextAlign::TOP_CENTER, "Off");
          }

          //Body
          it.printf((it.get_width()/2), 20, id(roboto15), TextAlign::TOP_CENTER, "%s", id(grocy_product_name).state.c_str()); //Product Name
          it.printf((it.get_width()/2), 37, id(roboto10), gray, TextAlign::TOP_CENTER, "%s", id(barcode).state.c_str());      // Barcode in gray underneath

          std::string product = id(grocy_product_name).state;

          if (product != "Pending" && product != "No Match"){
            it.line(0, 50, 96, 50, id(gray));
            it.image(0, it.get_height(), id(icon_stock), ImageAlign::BOTTOM_LEFT, id(orange), Color::BLACK);
            it.printf(12, it.get_height(), id(roboto10), TextAlign::BOTTOM_LEFT, "%s in stock", id(grocy_product_stock).state.c_str());
          }

      - id: page_boot
        lambda: |-

            //Wifi
            if( id(wifi_id).is_connected() ){
              it.image(32, 32, id(icon_wifi), ImageAlign::CENTER, id(green), Color::BLACK);
            }
            else{
              it.image(32, 32, id(icon_wifi_off), ImageAlign::CENTER, id(gray), Color::BLACK);
            }

            //HA API
            if( id(api_id).is_connected() ){
              it.image(64, 32, id(icon_home), ImageAlign::CENTER, id(blue), Color::BLACK);
            }
            else {
              it.image(64, 32, id(icon_home), ImageAlign::CENTER, id(gray), Color::BLACK);
            }

sensor:
  - platform: homeassistant
    id: ha_sensor_2
    entity_id: ${ha_sensor_2}
    internal: true
  - platform: homeassistant
    id: ha_sensor_1
    entity_id: ${ha_sensor_1}
    internal: true


# For the barcode reader
uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: scanner
  baud_rate: 9600
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\r"
    sequence:
      - lambda: |-
          UARTDebug::log_string(direction, bytes);
          std::string str(bytes.begin(), bytes.end());

          // Strip trailing \r or \n
          if (!str.empty() && (str.back() == '\r' || str.back() == '\n')) {
            str.pop_back();
          }

          bool is_valid = std::all_of(str.begin(), str.end(), [](char c) {
            return c >= 32 && c <= 126;
          });

          if (!is_valid || str.empty()) return;  // Don't publish invalid/binary strings

          // If barcode, update the barcode state and trigger the update button
          if(id(system_enable).state){
            id(barcode).publish_state(str.c_str());
            id(barcode_scanned).publish_state(true);
            id(barcode_scanned).publish_state(false);
          }


text_sensor:
  - platform: template
    id: barcode
    name: Barcode

  - platform: template
    id: grocy_product_name
    name: "Grocy Product Name"
    icon: "mdi:cart"
    disabled_by_default: True

  - platform: template
    id: grocy_product_stock
    name: "Grocy Stock Text"
    icon: "mdi:archive"
    disabled_by_default: True


script:
  - id: reset_display_timer
    mode: restart  # Restart the timer on each execution
    then:
      - switch.turn_off: navigate_enable
      - delay: 2s
      - display.page.show: page_icons  # Reset to default / main menu page
      - switch.turn_on: navigate_enable
  - id: turn_off_timer
    mode: restart  # Restart the timer on each execution
    then:
      - delay: !lambda "return id(sleep_delay).state*1000;"
      - select.set:
          id: scanner_mode
          option: "Off"

binary_sensor:

  # Triggered on barcode update, only true momentorly
  - platform: template
    name: "Barcode Scanned"
    id: barcode_scanned
    publish_initial_state: true
    on_press:
      - lambda: |-
          id(grocy_product_name).publish_state("Pending");
      - display.page.show: page_scanned
      - wait_until:
          condition:
            lambda: |-
              std::string product = id(grocy_product_name).state;
              return product != "Pending";
          timeout: 5s
      - script.execute: reset_display_timer
      - script.execute: turn_off_timer


  # Gesture Directions
  - platform: apds9960
    direction: UP
    name: "APDS960 Up Movement"
    internal: True
    on_press:
      then:
        - if:
            condition:
              and:
                - switch.is_on: system_enable
                - switch.is_on: navigate_enable
            then:
              - select.set:
                  id: scanner_mode
                  option: "Check Stock"

  - platform: apds9960
    direction: DOWN
    name: "APDS960 DOWN Movement"
    internal: True
    on_press:
      then:
        - if:
            condition:
              and:
                - switch.is_on: system_enable
                - switch.is_on: navigate_enable
            then:
              - select.set:
                  id: scanner_mode
                  option: "Open"

  - platform: apds9960
    direction: LEFT
    name: "APDS960 LEFT Movement"
    internal: True
    on_press:
      then:
        - if:
            condition:
              and:
                - switch.is_on: system_enable
                - switch.is_on: navigate_enable
            then:
              - select.set:
                  id: scanner_mode
                  option: "Consume"
              # - if:
              #     condition:
              #       - lambda: 'return id(scanner_mode).state == "Consume";'
              #     then:
              #     - select.set:
              #         id: scanner_mode
              #         option: "Open"
              #     else:
              #       - select.set:
              #           id: scanner_mode
              #           option: "Consume"

  - platform: apds9960
    direction: RIGHT
    name: "APDS960 RIGHT Movement"
    internal: True
    on_press:
      then:
        - if:
            condition:
              and:
                - switch.is_on: system_enable
                - switch.is_on: navigate_enable
            then:
              # - select.set:
              #     id: scanner_mode
              #     option: "Purchase"
              - if:
                  condition:
                    - lambda: 'return id(scanner_mode).state == "Purchase";'
                  then:
                  - select.set:
                      id: scanner_mode
                      option: "Add to Shopping List"
                  else:
                    - select.set:
                        id: scanner_mode
                        option: "Purchase"

select:
  # Mode for interacting with Grocy
  - platform: template
    entity_category: config
    id: scanner_mode
    name: "Mode"
    options:
      - "Purchase"
      - "Check Stock"
      - "Add to Shopping List"
      - "Consume"
      - "Open"
      - "Off"
    initial_option: "Off"
    optimistic: true
    restore_value: false
    on_value:
      then:
        - if:
            condition:
              lambda: |-
                return id(scanner_mode).state == "Off";
            then:
              - uart.write:
                  id: scanner
                  data: [0x00]  #Wake
              - delay: 50ms
              - uart.write:
                  id: scanner
                  data: [0x04, 0xEA, 0x04, 0x00, 0xFF, 0x0E]  #Disable Scanner
            else:
              - script.execute: turn_off_timer
              - uart.write:
                  id: scanner
                  data: [0x00]  #Wake
              - delay: 50ms
              # Action
              - uart.write:
                  id: scanner
                  data: [0x04, 0xE9, 0x04, 0x00, 0xFF, 0x0F] # Enable Scanner

  # The scanning trigger mode of the GM67
  - platform: template
    name: "Trigger Mode"
    id: scan_mode
    optimistic: true
    icon: mdi:auto-mode
    entity_category: CONFIG
    options:
      - Button Holding
      - Button Trigger
      - Continuous Scanning
      - Automatic Induction
      - Host
    initial_option: Automatic Induction
    restore_value: true
    disabled_by_default: True
    on_value:
      # Wake
      - uart.write:
          id: scanner
          data: [0x00]
      - delay: 50ms
      # Action
      - if:
          condition:
            lambda: 'if (x == "Button Holding") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x00, 0xFE, 0x9D]
      - if:
          condition:
            lambda: 'if (x == "Button Trigger") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x02, 0xFE, 0x9B]
      - if:
          condition:
            lambda: 'if (x == "Continuous Scanning") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x04, 0xFE, 0x99]
      - if:
          condition:
            lambda: 'if (x == "Automatic Induction") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x09, 0xFE, 0x94]
      - if:
          condition:
            lambda: 'if (x == "Host") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8A, 0x08, 0xFE, 0x95]

  # Buzzer Volume
  - platform: template
    name: "Buzzer Volume"
    id: buzzer_volume
    optimistic: true
    icon: mdi:volume-high
    entity_category: CONFIG
    disabled_by_default: True
    options:
      - 'Off'
      - Low
      - Medium
      - High
    initial_option: Low
    restore_value: true
    on_value:
      # Wake
      - uart.write:
          id: scanner
          data: [0x00]
      - delay: 50ms
      # Action
      - if: # Off
          condition:
            lambda: 'if (x == "Off") { return true; } else { return false; }'
          then:
            - uart.write: # Turn off
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x00, 0xFE, 0xEF]
      - if: # Low
          condition:
            lambda: 'if (x == "Low") { return true; } else { return false; }'
          then:
            - uart.write: # Turn on
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x01, 0xFE, 0xEE]
            - uart.write: # Set low
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8C, 0x02, 0xFE, 0x99]
      - if: # Medium
          condition:
            lambda: 'if (x == "Medium") { return true; } else { return false; }'
          then:
            - uart.write: # Turn on
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x01, 0xFE, 0xE]
            - uart.write: # Set medium
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8C, 0x01, 0xFE, 0x9A]
      - if: # High
          condition:
            lambda: 'if (x == "High") { return true; } else { return false; }'
          then:
            - uart.write: # Turn on
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x38, 0x01, 0xFE, 0xE]
            - uart.write: # Set high
                id: scanner
                data: [0x07, 0xC6, 0x04, 0x08, 0x00, 0x8C, 0x00, 0xFE, 0x9B]

  # Scanning Light
  - platform: template
    name: "Scanning Light"
    id: scanning_light
    optimistic: true
    icon: mdi:lightbulb-on
    entity_category: CONFIG
    disabled_by_default: True
    options:
      - On When Reading
      - Always On
      - Always Off
    initial_option: On When Reading
    restore_value: true
    on_value:
      # Wake
      - uart.write:
          id: scanner
          data: [0x00]
      - delay: 50ms
      # Action
      - if: # On When Reading
          condition:
            lambda: 'if (x == "On When Reading") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x02, 0x00, 0xFE, 0x32]
      - if: # Always On
          condition:
            lambda: 'if (x == "Always On") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x02, 0x01, 0xFE, 0x31]
      - if: # Always Off
          condition:
            lambda: 'if (x == "Always Off") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x02, 0x02, 0xFE, 0x30]
  # Collimation
  - platform: template
    name: "Collimation"
    id: collimation
    optimistic: true
    icon: mdi:line-scan
    entity_category: CONFIG
    disabled_by_default: True
    options:
      - On When Reading
      - Always On
      - Always Off
    initial_option: On When Reading
    restore_value: true
    on_value:
      # Wake
      - uart.write:
          id: scanner
          data: [0x00]
      - delay: 50ms
      # Action
      - if: # On When Reading
          condition:
            lambda: 'if (x == "On When Reading") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x03, 0x00, 0xFE, 0x31]
      - if: # Always On
          condition:
            lambda: 'if (x == "Always On") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x03, 0x01, 0xFE, 0x30]
      - if: # Always Off
          condition:
            lambda: 'if (x == "Always Off") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0x03, 0x02, 0xFE, 0x2F]

  # Same Code Delay
  - platform: template
    name: "Same Code Delay"
    id: same_code_delay
    optimistic: true
    icon: mdi:repeat-variant
    entity_category: CONFIG
    disabled_by_default: True
    options:
      - 0.5s
      - 1s
      - 3s
      - 5s
      - 7s
      - No Repeat
    initial_option: 3s
    restore_value: true
    on_value:
      # Wake
      - uart.write:
          id: scanner
          data: [0x00]
      - delay: 50ms
      # Action
      - if: # 0.5s
          condition:
            lambda: 'if (x == "0.5s") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF3, 0x03, 0x05, 0xFE, 0x2B]
      - if: # 1s
          condition:
            lambda: 'if (x == "1s") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x01, 0xFD, 0x6A]
      - if: # 3s
          condition:
            lambda: 'if (x == "3s") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x03, 0xFD, 0x68]
      - if: # 5s
          condition:
            lambda: 'if (x == "5s") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x05, 0xFD, 0x66]
      - if: # 7s
          condition:
            lambda: 'if (x == "7s") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x07, 0xFD, 0x64]
      - if: # No Repeat
          condition:
            lambda: 'if (x == "No Repeat") { return true; } else { return false; }'
          then:
            - uart.write:
                id: scanner
                data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xC9, 0x09, 0xFD, 0x62]

switch:
  # Collimation Flashing
  - platform: template
    name: "Collimation Flashing"
    id: collimation_flashing
    optimistic: true
    icon: mdi:line-scan
    entity_category: CONFIG
    disabled_by_default: True
    restore_mode : RESTORE_DEFAULT_ON
    turn_on_action:
      # Wake
      - uart.write:
          id: scanner
          data: [0x00]
      - delay: 50ms
      # Action
      - uart.write:
          id: scanner
          data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xB8, 0x00, 0xFD, 0x7C]
    turn_off_action:
      # Wake
      - uart.write:
          id: scanner
          data: [0x00]
      - delay: 50ms
      # Action
      - uart.write:
          id: scanner
          data: [0x08, 0xC6, 0x04, 0x08, 0x00, 0xF2, 0xB8, 0x01, 0xFD, 0x7B]

  # Scanning Enabled
  - platform: template
    name: "System Enabled"
    id: system_enable
    internal: True
    optimistic: true
    restore_mode : ALWAYS_OFF

  - platform: template
    name: "Navigate Enabled"
    id: navigate_enable
    internal: True
    optimistic: true
    restore_mode : ALWAYS_OFF

  - platform: template
    name: "Show Info when Idle"
    id: info_when_idle
    optimistic: true
    restore_mode : ALWAYS_OFF


image:
  binary:
    - file: mdi:silverware-fork-knife
      id: icon_consume
      resize: 64x64

    - file: mdi:store-search-outline
      id: icon_search
      resize: 64x64

    - file: mdi:list-box
      id: icon_list
      resize: 64x64

    - file: mdi:cart
      id: icon_purchase
      resize: 64x64

    - file: mdi:semantic-web
      id: icon_open
      resize: 64x64

    - file: mdi:archive
      id: icon_stock
      resize: 10x10

    - file: mdi:wifi
      id: icon_wifi
      resize: 15x15

    - file: mdi:wifi-off
      id: icon_wifi_off
      resize: 15x15

    - file: mdi:home
      id: icon_home
      resize: 15x15

    - file: ${sensor_icon_2}
      id: icon_sensor_2
      resize: 15x15

    - file: ${sensor_icon_1}
      id: icon_sensor_1
      resize: 15x15

font:
  - file: "gfonts://Roboto+Mono"
    id: mono25
    size: 25
  - file: "gfonts://Roboto+Mono"
    id: mono12
    size: 12
  - file: "gfonts://Roboto"
    id: roboto15
    size: 15
  - file: "gfonts://Roboto"
    id: roboto10
    size: 10

color:
  - id: red
    red: 100%
    green: 3%
    blue: 5%

  - id: green
    red: 0%
    green: 90%
    blue: 25%

  - id: green_dim
    red: 0%
    green: 50%
    blue: 0%

  - id: blue
    red: 0%
    green: 15%
    blue: 70%

  - id: orange
    red: 55%
    green: 55%
    blue: 25%

  - id: orange_dim
    red: 40%
    green: 40%
    blue: 10%

  - id: gray
    red: 25%
    green: 25%
    blue: 25%

  - id: sensor_1_color
    hex: ${sensor_1_color}

  - id: sensor_2_color
    hex: ${sensor_2_color}
